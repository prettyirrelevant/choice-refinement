{"version":3,"sources":["components/ScrollText.js","assets/algorandwallet.svg","assets/myalgo.svg","assets/algosigner.svg","statics/PopFromBottomModal.tsx"],"names":["ScrollText","word","className","chain","ChainType","TestNet","PopFromBottomModal","walletConnector","useSelector","selectConnector","walletType","selectWalletType","connected","selectConnected","address","selectAddress","dispatch","useDispatch","openModalVote","state","status","voteModal","chooseWallet","_walletType","a","connectWallet","setWalletType","subscribeToEvents","useCallback","_walletConnector","on","error","payload","console","log","accounts","params","setAccounts","reset","setAccountsAtConnection","setConnected","setAlgoSignerAccounts","ledger","then","catch","createSession","connect","window","AlgoSigner","results","type","useEffect","length","getAccountAssets","style","display","width","flex","onClick","src","algowallet","alt","myalgo","algosigner","undefined"],"mappings":"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","file":"static/js/8.74b9c007.chunk.js","sourcesContent":["const ScrollText = ({ word }) => {\n  return (\n    <div className=\"Marquee__Wrapper\">\n      <div className=\"Marquee__TextHolder\">\n        <div className=\"Marquee__TextGroup\">\n          <span className=\"Marquee__Text\">\n            <span className=\"Marquee__Word\">{word}.</span>\n            <span className=\"Marquee__Dot\"></span>\n          </span>\n          <span className=\"Marquee__Text\">\n            <span className=\"Marquee__Word\">{word}!</span>\n            <span className=\"Marquee__Dot\"></span>\n          </span>\n          <span className=\"Marquee__Text\">\n            <span className=\"Marquee__Word\">{word},</span>\n            <span className=\"Marquee__Dot\"></span>\n          </span>\n          <span className=\"Marquee__Text\">\n            <span className=\"Marquee__Word\">{word}?</span>\n            <span className=\"Marquee__Dot\"></span>\n          </span>\n          <span className=\"Marquee__Text\">\n            <span className=\"Marquee__Word\">\"{word}\"</span>\n            <span className=\"Marquee__Dot\"></span>\n          </span>\n        </div>\n        <div className=\"Marquee__TextGroup\">\n          <span className=\"Marquee__Text\">\n            <span className=\"Marquee__Word\">{word}.</span>\n            <span className=\"Marquee__Dot\"></span>\n          </span>\n          <span className=\"Marquee__Text\">\n            <span className=\"Marquee__Word\">{word}!</span>\n            <span className=\"Marquee__Dot\"></span>\n          </span>\n          <span className=\"Marquee__Text\">\n            <span className=\"Marquee__Word\">{word},</span>\n            <span className=\"Marquee__Dot\"></span>\n          </span>\n          <span className=\"Marquee__Text\">\n            <span className=\"Marquee__Word\">{word}?</span>\n            <span className=\"Marquee__Dot\"></span>\n          </span>\n          <span className=\"Marquee__Text\">\n            <span className=\"Marquee__Word\">\"{word}\"</span>\n            <span className=\"Marquee__Dot\"></span>\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default ScrollText;\n","export default __webpack_public_path__ + \"static/media/algorandwallet.c1d475ad.svg\";","export default __webpack_public_path__ + \"static/media/myalgo.7390ec09.svg\";","export default __webpack_public_path__ + \"static/media/algosigner.2ec35000.svg\";","import { useCallback, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport WalletConnect from \"@walletconnect/client\";\nimport algowallet from \"../assets/algorandwallet.svg\";\nimport myalgo from \"../assets/myalgo.svg\";\nimport algosigner from \"../assets/algosigner.svg\";\nimport ScrollText from \"../components/ScrollText\";\nimport {\n  ChainType,\n  getAccountAssets,\n  reset,\n  selectAddress,\n  selectConnected,\n  selectConnector,\n  selectWalletType,\n  setAccounts,\n  setConnected,\n  setWalletType,\n} from \"../store/walletSlice\";\n\nconst chain = ChainType.TestNet;\n\nconst PopFromBottomModal = () => {\n  const walletConnector = useSelector(selectConnector);\n  const walletType = useSelector(selectWalletType);\n  const connected = useSelector(selectConnected);\n  const address = useSelector(selectAddress);\n  const dispatch = useDispatch();\n\n  const { openModalVote } = useSelector(\n    (state) => (state as any).status.voteModal\n  );\n\n  const chooseWallet = async (_walletType: string) => {\n    if (!walletType || walletType !== _walletType) {\n      dispatch(setWalletType(_walletType));\n    } else {\n      connectWallet();\n    }\n  };\n\n  const subscribeToEvents = useCallback(() => {\n    const _walletConnector = walletConnector as WalletConnect;\n    if (!_walletConnector) {\n      return;\n    }\n    // Subscribe to connection events\n    _walletConnector.on(\"connect\", (error, payload) => {\n      console.log(\"%cOn connect\", \"background: yellow\");\n      if (error) {\n        throw error;\n      }\n      const { accounts } = payload.params[0];\n      dispatch(setAccounts(accounts));\n    });\n\n    _walletConnector.on(\"session_update\", (error, payload) => {\n      console.log(\"%cOn session_update\", \"background: yellow\");\n      if (error) {\n        throw error;\n      }\n      const { accounts } = payload.params[0];\n      dispatch(setAccounts(accounts));\n    });\n\n    _walletConnector.on(\"disconnect\", (error, payload) => {\n      console.log(\"%cOn disconnect\", \"background: yellow\");\n      if (error) {\n        throw error;\n      }\n      dispatch(reset());\n    });\n  }, [dispatch, walletConnector]);\n\n  const setAccountsAtConnection = useCallback(\n    (accounts: []) => {\n      dispatch(setAccounts(accounts));\n      dispatch(setConnected(true));\n    },\n    [dispatch]\n  );\n\n  const setAlgoSignerAccounts = useCallback(() => {\n    walletConnector\n      .accounts({ ledger: \"TestNet\" })\n      .then((accounts: []) => {\n        setAccountsAtConnection(accounts);\n      })\n      .catch((error: ErrorEvent) => {\n        console.error(error);\n      });\n  }, [walletConnector, setAccountsAtConnection]);\n\n  const connectWallet = useCallback(() => {\n    if (walletType && walletConnector && !address) {\n      // Check if connection is already established\n      // Connect wallet\n      if (!walletConnector) {\n        return;\n      }\n      if (walletType === \"walletConnect\") {\n        subscribeToEvents();\n        if (!walletConnector.connected) {\n          walletConnector.createSession();\n        }\n        const { accounts } = walletConnector;\n        setAccountsAtConnection(accounts);\n      }\n      if (walletType === \"myAlgo\") {\n        walletConnector.connect().then((accounts: []) => {\n          setAccountsAtConnection(accounts);\n        });\n      }\n      if (walletType === \"algoSigner\") {\n        if (connected) {\n          setAlgoSignerAccounts();\n        } else {\n          (window as any).AlgoSigner.connect()\n            .then((results: any) => {\n              console.log(\"results? \", results);\n              setAlgoSignerAccounts();\n            })\n            .catch((error: ErrorEvent) => {\n              console.log(\"here?\");\n              console.error(error);\n            });\n        }\n      }\n      dispatch({ type: \"close_vote_modal\" });\n    }\n  }, [\n    walletConnector,\n    address,\n    connected,\n    dispatch,\n    subscribeToEvents,\n    setAccountsAtConnection,\n    setAlgoSignerAccounts,\n    walletType,\n  ]);\n\n  useEffect(() => {\n    connectWallet();\n  }, [connectWallet]);\n\n  useEffect(() => {\n    // Check if connection is already established\n    if (walletConnector && address && address.length > 0) {\n      dispatch(getAccountAssets({ chain, address }));\n    }\n  }, [address]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <menu\n      className=\"mn_sm\"\n      style={{ display: `${!!openModalVote ? \"flex\" : \"none\"}` }}\n    >\n      <div\n        style={{ width: \"100%\", flex: 1 }}\n        onClick={() => {\n          dispatch({ type: \"close_vote_modal\" });\n        }}\n      ></div>\n\n      <div className=\"mn_sm_modal\">\n        <div className=\"mn_sm_modal_inn\">\n          <>\n            <div className=\"algo_connect_hd\">Select Wallet to continue</div>\n\n            <div\n              className=\"connect_butt\"\n              onClick={() => chooseWallet(\"walletConnect\")}\n            >\n              <div className=\"connect_wallet_img\">\n                <img src={algowallet} alt=\"\" />\n              </div>\n              <p className=\"connect_wallet_txt\">Algorand Wallet</p>\n            </div>\n            <div\n              className=\"connect_butt\"\n              onClick={() => chooseWallet(\"myAlgo\")}\n            >\n              <div className=\"connect_wallet_img\">\n                <img src={myalgo} alt=\"\" />\n              </div>\n              <p className=\"connect_wallet_txt\">My Algo Wallet</p>\n            </div>\n            <div\n              className=\"connect_butt\"\n              onClick={() => chooseWallet(\"algoSigner\")}\n            >\n              <div className=\"connect_wallet_img\">\n                <img src={algosigner} alt=\"\" />\n              </div>\n              <p className=\"connect_wallet_txt\">\n                {typeof (window as any).AlgoSigner === undefined\n                  ? \"Install AlgoSigner\"\n                  : \"AlgoSigner\"}\n              </p>\n            </div>\n          </>\n\n          <ScrollText word={\"Decentralized decisions\"} />\n        </div>\n      </div>\n    </menu>\n  );\n};\n\nexport default PopFromBottomModal;\n"],"sourceRoot":""}